--- frontend.js.orig
+++ frontend.js
@@ -199,33 +199,30 @@
             });
             
             this.wavesurfer.on("ready", () => {
-                // Skip duplicate events
-                if (this.waveformReady) {
-                    console.log("WaveSurfer ready event already handled, skipping duplicate");
-                    return;
-                }
-                if (this.autoPlayAfterLoad) {
-                    console.log("🎵 Starting autoplay after ready...");
-                    this.autoPlayAfterLoad = false;
-                    this.play();
-                }
-                
                 this.waveformReady = true;
-                console.log("WaveSurfer ready with waveform");
-                
-                // Show status if it was loading
                 this.showStatus("Waveform ready");
                 
-                // Check for autoplay
+                // BENJAMIN FIX CONSOLIDATED: Single ready handler with AudioContext resume
                 if (this.autoPlayAfterLoad) {
-                    console.log("🎵 Ready for autoplay - checking AudioContext");                                        // 🎯 BENJAMIN AUDIOCONTEXT FIX: Test et résume si nécessaire                    const resumeAndPlay = async () => {                        if (this.wavesurfer && this.wavesurfer.backend && this.wavesurfer.backend.ac) {                            if (this.wavesurfer.backend.ac.state === "suspended") {                                console.log("🔊 Resuming suspended AudioContext");                                await this.wavesurfer.backend.ac.resume();                            }                        }                        this.autoPlayAfterLoad = false;                        this.play();                    };                                        resumeAndPlay().catch(e => {                        console.log("⚠️ AudioContext issue, will play on next user click:", e.message);                        this.autoPlayAfterLoad = false;                    });
+                    console.log("🎵 Starting autoplay after ready...");
+                    this.autoPlayAfterLoad = false;
+                    
+                    // Resume AudioContext and play
+                    const resumeAndPlay = async () => {
+                        if (this.wavesurfer?.backend?.ac?.state === "suspended") {
+                            console.log("🔊 Resuming suspended AudioContext");
+                            await this.wavesurfer.backend.ac.resume();
+                        }
+                        this.play();
+                    };
+                    
+                    resumeAndPlay().catch(e => {
+                        console.log("⚠️ AudioContext blocked, manual interaction required:", e.message);
+                    });
                 }
             });
             
             this.wavesurfer.on('error', (error) => {
                 console.error('WaveSurfer error:', error);
-                this.showStatus('Error loading track');
             });
             
             this.wavesurfer.on('finish', () => {
@@ -299,14 +296,6 @@
             console.log('⚠️ WaveSurfer instance not available, need to reinitialize');
         }
             
-            // Bind WaveSurfer events for HTML5 fallback mode
-            this.wavesurfer.on('ready', () => {
-                console.log('✅ WaveSurfer ready with real waveform analysis');
-                if (this.autoPlayAfterLoad) {
-                    this.autoPlayAfterLoad = false;
-                    this.play();
-                }
-            });
-            
             this.wavesurfer.on('finish', () => {
                 this.nextTrack();
                 this.isPlaying = false;
